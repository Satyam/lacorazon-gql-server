/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  _?: boolean;
  users?: Array<GQLUser>;
  user?: GQLUser;
  currentUser?: GQLUser;
  ventas?: Array<GQLVenta>;
  venta?: GQLVenta;
  distribuidores?: Array<GQLDistribuidor>;
  distribuidor?: GQLDistribuidor;
  consignas?: Array<GQLConsigna>;
  consigna?: GQLConsigna;
}

export interface GQLUser {
  id: string;
  nombre: string;
  email?: string;
  ventas?: Array<GQLVenta>;
}

export interface GQLVenta {
  id: string;
  concepto: string;
  fecha: string;
  vendedor?: GQLUser;
  cantidad?: number;
  precioUnitario?: number;
  iva?: boolean;
}

export interface GQLDistribuidor {
  id: string;
  nombre: string;
  localidad?: string;
  contacto?: string;
  telefono?: string;
  email?: string;
  direccion?: string;
  entregados?: number;
  existencias?: number;
  consigna?: Array<GQLConsigna>;
}

export interface GQLConsigna {
  id: string;
  fecha?: string;
  distribuidor?: GQLDistribuidor;
  vendedor?: GQLUser;
  entregados?: number;
  porcentaje?: number;
  vendidos?: number;
  devueltos?: number;
  cobrado?: number;
  iva?: boolean;
  comentarios?: string;
}

export interface GQLMutation {
  _?: boolean;
  createUser: GQLUser;
  updateUser: GQLUser;
  deleteUser: GQLUser;
  login?: GQLUser;
  logout?: boolean;
  createVenta: GQLVenta;
  updateVenta: GQLVenta;
  deleteVenta: GQLVenta;
  createDistribuidor: GQLDistribuidor;
  updateDistribuidor: GQLDistribuidor;
  deleteDistribuidor: GQLDistribuidor;
}

export interface GQLSubscription {
  _?: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  User?: GQLUserTypeResolver;
  Venta?: GQLVentaTypeResolver;
  Distribuidor?: GQLDistribuidorTypeResolver;
  Consigna?: GQLConsignaTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = undefined> {
  _?: QueryTo_Resolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  currentUser?: QueryToCurrentUserResolver<TParent>;
  ventas?: QueryToVentasResolver<TParent>;
  venta?: QueryToVentaResolver<TParent>;
  distribuidores?: QueryToDistribuidoresResolver<TParent>;
  distribuidor?: QueryToDistribuidorResolver<TParent>;
  consignas?: QueryToConsignasResolver<TParent>;
  consigna?: QueryToConsignaResolver<TParent>;
}

export interface QueryTo_Resolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToUsersResolver<TParent = undefined, TResult = Array<GQLUser> | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToUserArgs {
  id: string;
}
export interface QueryToUserResolver<TParent = undefined, TResult = GQLUser | null> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToCurrentUserResolver<TParent = undefined, TResult = GQLUser | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToVentasArgs {
  offset?: number;
  limit?: number;
  last?: number;
  idVendedor?: string;
}
export interface QueryToVentasResolver<TParent = undefined, TResult = Array<GQLVenta> | null> {
  (parent: TParent, args: QueryToVentasArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToVentaArgs {
  id: string;
}
export interface QueryToVentaResolver<TParent = undefined, TResult = GQLVenta | null> {
  (parent: TParent, args: QueryToVentaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToDistribuidoresArgs {
  offset?: number;
  limit?: number;
  last?: number;
}
export interface QueryToDistribuidoresResolver<TParent = undefined, TResult = Array<GQLDistribuidor> | null> {
  (parent: TParent, args: QueryToDistribuidoresArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToDistribuidorArgs {
  id: string;
}
export interface QueryToDistribuidorResolver<TParent = undefined, TResult = GQLDistribuidor | null> {
  (parent: TParent, args: QueryToDistribuidorArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToConsignasArgs {
  offset?: number;
  limit?: number;
  last?: number;
}
export interface QueryToConsignasResolver<TParent = undefined, TResult = Array<GQLConsigna> | null> {
  (parent: TParent, args: QueryToConsignasArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface QueryToConsignaArgs {
  id: string;
}
export interface QueryToConsignaResolver<TParent = undefined, TResult = GQLConsigna | null> {
  (parent: TParent, args: QueryToConsignaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLUserTypeResolver<TParent = GQLUser> {
  id?: UserToIdResolver<TParent>;
  nombre?: UserToNombreResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  ventas?: UserToVentasResolver<TParent>;
}

export interface UserToIdResolver<TParent = GQLUser, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface UserToNombreResolver<TParent = GQLUser, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface UserToEmailResolver<TParent = GQLUser, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface UserToVentasArgs {
  offset?: number;
  limit?: number;
  last?: number;
}
export interface UserToVentasResolver<TParent = GQLUser, TResult = Array<GQLVenta> | null> {
  (parent: TParent, args: UserToVentasArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLVentaTypeResolver<TParent = GQLVenta> {
  id?: VentaToIdResolver<TParent>;
  concepto?: VentaToConceptoResolver<TParent>;
  fecha?: VentaToFechaResolver<TParent>;
  vendedor?: VentaToVendedorResolver<TParent>;
  cantidad?: VentaToCantidadResolver<TParent>;
  precioUnitario?: VentaToPrecioUnitarioResolver<TParent>;
  iva?: VentaToIvaResolver<TParent>;
}

export interface VentaToIdResolver<TParent = GQLVenta, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToConceptoResolver<TParent = GQLVenta, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToFechaResolver<TParent = GQLVenta, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToVendedorResolver<TParent = GQLVenta, TResult = GQLUser | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToCantidadResolver<TParent = GQLVenta, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToPrecioUnitarioResolver<TParent = GQLVenta, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface VentaToIvaResolver<TParent = GQLVenta, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLDistribuidorTypeResolver<TParent = GQLDistribuidor> {
  id?: DistribuidorToIdResolver<TParent>;
  nombre?: DistribuidorToNombreResolver<TParent>;
  localidad?: DistribuidorToLocalidadResolver<TParent>;
  contacto?: DistribuidorToContactoResolver<TParent>;
  telefono?: DistribuidorToTelefonoResolver<TParent>;
  email?: DistribuidorToEmailResolver<TParent>;
  direccion?: DistribuidorToDireccionResolver<TParent>;
  entregados?: DistribuidorToEntregadosResolver<TParent>;
  existencias?: DistribuidorToExistenciasResolver<TParent>;
  consigna?: DistribuidorToConsignaResolver<TParent>;
}

export interface DistribuidorToIdResolver<TParent = GQLDistribuidor, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToNombreResolver<TParent = GQLDistribuidor, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToLocalidadResolver<TParent = GQLDistribuidor, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToContactoResolver<TParent = GQLDistribuidor, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToTelefonoResolver<TParent = GQLDistribuidor, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToEmailResolver<TParent = GQLDistribuidor, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToDireccionResolver<TParent = GQLDistribuidor, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToEntregadosResolver<TParent = GQLDistribuidor, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToExistenciasResolver<TParent = GQLDistribuidor, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface DistribuidorToConsignaArgs {
  offset?: number;
  limit?: number;
  last?: number;
}
export interface DistribuidorToConsignaResolver<TParent = GQLDistribuidor, TResult = Array<GQLConsigna> | null> {
  (parent: TParent, args: DistribuidorToConsignaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLConsignaTypeResolver<TParent = GQLConsigna> {
  id?: ConsignaToIdResolver<TParent>;
  fecha?: ConsignaToFechaResolver<TParent>;
  distribuidor?: ConsignaToDistribuidorResolver<TParent>;
  vendedor?: ConsignaToVendedorResolver<TParent>;
  entregados?: ConsignaToEntregadosResolver<TParent>;
  porcentaje?: ConsignaToPorcentajeResolver<TParent>;
  vendidos?: ConsignaToVendidosResolver<TParent>;
  devueltos?: ConsignaToDevueltosResolver<TParent>;
  cobrado?: ConsignaToCobradoResolver<TParent>;
  iva?: ConsignaToIvaResolver<TParent>;
  comentarios?: ConsignaToComentariosResolver<TParent>;
}

export interface ConsignaToIdResolver<TParent = GQLConsigna, TResult = string> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToFechaResolver<TParent = GQLConsigna, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToDistribuidorResolver<TParent = GQLConsigna, TResult = GQLDistribuidor | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToVendedorResolver<TParent = GQLConsigna, TResult = GQLUser | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToEntregadosResolver<TParent = GQLConsigna, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToPorcentajeResolver<TParent = GQLConsigna, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToVendidosResolver<TParent = GQLConsigna, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToDevueltosResolver<TParent = GQLConsigna, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToCobradoResolver<TParent = GQLConsigna, TResult = number | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToIvaResolver<TParent = GQLConsigna, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface ConsignaToComentariosResolver<TParent = GQLConsigna, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLMutationTypeResolver<TParent = undefined> {
  _?: MutationTo_Resolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  deleteUser?: MutationToDeleteUserResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
  logout?: MutationToLogoutResolver<TParent>;
  createVenta?: MutationToCreateVentaResolver<TParent>;
  updateVenta?: MutationToUpdateVentaResolver<TParent>;
  deleteVenta?: MutationToDeleteVentaResolver<TParent>;
  createDistribuidor?: MutationToCreateDistribuidorResolver<TParent>;
  updateDistribuidor?: MutationToUpdateDistribuidorResolver<TParent>;
  deleteDistribuidor?: MutationToDeleteDistribuidorResolver<TParent>;
}

export interface MutationTo_Resolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToCreateUserArgs {
  nombre: string;
  email?: string;
  password: string;
}
export interface MutationToCreateUserResolver<TParent = undefined, TResult = GQLUser> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToUpdateUserArgs {
  id: string;
  nombre?: string;
  email?: string;
  password?: string;
}
export interface MutationToUpdateUserResolver<TParent = undefined, TResult = GQLUser> {
  (parent: TParent, args: MutationToUpdateUserArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToDeleteUserArgs {
  id: string;
}
export interface MutationToDeleteUserResolver<TParent = undefined, TResult = GQLUser> {
  (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToLoginArgs {
  nombre: string;
  password: string;
}
export interface MutationToLoginResolver<TParent = undefined, TResult = GQLUser | null> {
  (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToLogoutResolver<TParent = undefined, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToCreateVentaArgs {
  concepto: string;
  fecha: string;
  idVendedor?: string;
  cantidad?: number;
  precioUnitario?: number;
  iva?: boolean;
}
export interface MutationToCreateVentaResolver<TParent = undefined, TResult = GQLVenta> {
  (parent: TParent, args: MutationToCreateVentaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToUpdateVentaArgs {
  id: string;
  concepto?: string;
  fecha?: string;
  idVendedor?: string;
  cantidad?: number;
  precioUnitario?: number;
  iva?: boolean;
}
export interface MutationToUpdateVentaResolver<TParent = undefined, TResult = GQLVenta> {
  (parent: TParent, args: MutationToUpdateVentaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToDeleteVentaArgs {
  id: string;
}
export interface MutationToDeleteVentaResolver<TParent = undefined, TResult = GQLVenta> {
  (parent: TParent, args: MutationToDeleteVentaArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToCreateDistribuidorArgs {
  nombre: string;
  email?: string;
  localidad?: string;
  contacto?: string;
  telefono?: string;
  direccion?: string;
}
export interface MutationToCreateDistribuidorResolver<TParent = undefined, TResult = GQLDistribuidor> {
  (parent: TParent, args: MutationToCreateDistribuidorArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToUpdateDistribuidorArgs {
  id: string;
  nombre?: string;
  email?: string;
  localidad?: string;
  contacto?: string;
  telefono?: string;
  direccion?: string;
}
export interface MutationToUpdateDistribuidorResolver<TParent = undefined, TResult = GQLDistribuidor> {
  (parent: TParent, args: MutationToUpdateDistribuidorArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface MutationToDeleteDistribuidorArgs {
  id: string;
}
export interface MutationToDeleteDistribuidorResolver<TParent = undefined, TResult = GQLDistribuidor> {
  (parent: TParent, args: MutationToDeleteDistribuidorArgs, context: any, info: GraphQLResolveInfo): Promise<TResult>;
}

export interface GQLSubscriptionTypeResolver<TParent = undefined> {
  _?: SubscriptionTo_Resolver<TParent>;
}

export interface SubscriptionTo_Resolver<TParent = undefined, TResult = boolean | null> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}
