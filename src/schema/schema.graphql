directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR
enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type Consigna {
  id: ID!
  fecha: String
  distribuidor: Distribuidor
  vendedor: User
  entregados: Int
  porcentaje: Float
  vendidos: Int
  devueltos: Int
  cobrado: Float
  iva: Boolean
  comentarios: String
}

type Distribuidor {
  id: ID!
  nombre: String!
  localidad: String
  contacto: String
  telefono: String
  email: String
  direccion: String
  entregados: Int
  existencias: Int
  consigna(offset: Int, limit: Int, last: Int): [Consigna!]
}

type Mutation {
  _: Boolean
  createUser(nombre: String!, email: String, password: String!): User!
  updateUser(id: ID!, nombre: String, email: String, password: String): User!
  deleteUser(id: ID!): User!
  login(nombre: String!, password: String!): User
  logout: Boolean
  createVenta(
    concepto: String!
    fecha: String!
    idVendedor: ID
    cantidad: Int
    precioUnitario: Float
    iva: Boolean
  ): Venta!
  updateVenta(
    id: ID!
    concepto: String
    fecha: String
    idVendedor: ID
    cantidad: Int
    precioUnitario: Float
    iva: Boolean
  ): Venta!
  deleteVenta(id: ID!): Venta!
  createDistribuidor(
    nombre: String!
    email: String
    localidad: String
    contacto: String
    telefono: String
    direccion: String
  ): Distribuidor!
  updateDistribuidor(
    id: ID!
    nombre: String
    email: String
    localidad: String
    contacto: String
    telefono: String
    direccion: String
  ): Distribuidor!
  deleteDistribuidor(id: ID!): Distribuidor!
}

type Query {
  _: Boolean
  users: [User!]
  user(id: ID!): User
  currentUser: User
  ventas(offset: Int, limit: Int, last: Int, idVendedor: ID): [Venta!]
  venta(id: ID!): Venta
  distribuidores(offset: Int, limit: Int, last: Int): [Distribuidor!]
  distribuidor(id: ID!): Distribuidor
  consignas(offset: Int, limit: Int, last: Int): [Consigna!]
  consigna(id: ID!): Consigna
}

type Subscription {
  _: Boolean
}

# The `Upload` scalar type represents a file upload.
scalar Upload

type User {
  id: ID!
  nombre: String!
  email: String
  ventas(offset: Int, limit: Int, last: Int): [Venta!]
}

type Venta {
  id: ID!
  concepto: String!
  fecha: String!
  vendedor: User
  cantidad: Int
  precioUnitario: Float
  iva: Boolean
}
